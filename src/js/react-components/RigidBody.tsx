import React, {useEffect, useRef} from "react";
import {Mesh} from "three";
import {useWorld} from "koota/react";
import {NeedsJoltBody} from "../ecs/traits/needs-jolt-body";
import {MeshRef} from "../ecs/traits/mesh-ref";

/*
Not in use yet, just a sketch of what this could look like to enable similar DXto r3/rapier.
This is half generated by ChatGPT so no expectations yet...
*/

export function RigidBody({ children }: { children: React.ReactNode }) {
  const world = useWorld();

  // suspend until world has the JoltWorld trait ...

  const childRef = useRef<Mesh>(null!);

  // Ensure there is at least one child and get the first one
  const firstChild = React.Children.only(children);

  useEffect(() => {
    // Perform any actions with the ref to the first child

    const entity = world.spawn(); // entity could be an optional prop if we wanted
    // to add this to an existing entity instead of spawning a new one

    entity.add(NeedsJoltBody({/*pass the body settings from props here*/}))
    entity.add(MeshRef({ref: childRef.current}));

    return () => {
      // do clean up...
      // we don't want to just do entity.destroy()
      // that won't do any cleanup with jolt. Instead,
      // we should add some destruction flag or similar
    }

  }, []);

  return (
    <>
      {/* Clone the child and attach the ref */}
      {React.isValidElement(firstChild) && React.cloneElement(firstChild, { ref: childRef })}
    </>
  );
}